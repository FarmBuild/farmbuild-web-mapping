"use strict";angular.module("farmbuild.webmapping",["farmbuild.core","farmbuild.farmdata"]).factory("webmapping",function(farmdata,validations,$log,webmappingConverter,webMappingSession){function createDefault(farmData){return webmappingConverter.toGeoJson(farmData)}function _load(farmData){var loaded=farmdata.load(farmData);return _isDefined(loaded)?createDefault(farmData):void 0}function _exportFarmData(toExport){return toExport?_toFarmData(toExport):void 0}var _isDefined=validations.isDefined,webmapping={session:webMappingSession,farmdata:farmdata};return $log.info("Welcome to Web Mapping... this should only be initialised once! why we see twice in the example?"),webmapping.load=_load,webmapping.exportFarmData=_exportFarmData,webmapping.version="0.1.0","undefined"==typeof window.farmbuild?window.farmbuild={webmapping:webmapping}:window.farmbuild.webmapping=webmapping,webmapping}),angular.module("farmbuild.webmapping").factory("webmappingConverter",function(farmdata,validations,$log,webMappingSession){function createFeature(geometry){return{type:"Feature",geometry:angular.copy(geometry),properties:{}}}function toGeoJson(farmData){$log.info("Extracting farm and paddocks geometry from farmData ...");var farm=farmData.geometry,paddocks=[];return _isDefined(farmData.geometry)&&_isDefined(farmData.paddocks)?(angular.forEach(farmData.paddocks,function(val){paddocks.push(createFeature(val.geometry))}),{farm:{type:"FeatureCollection",features:[createFeature(farm)]},paddocks:{type:"FeatureCollection",features:paddocks}}):void 0}function toFarmData(geoJson){$log.info("Writing farm and paddocks geojson to farmData ...");var paddocks=(data.geometry,[]);return angular.forEach(data.paddocks,function(val){paddocks.push(val.geometry)}),geoJson}var _isDefined=validations.isDefined,webmappingConverter={};return webmappingConverter.toGeoJson=toGeoJson,webmappingConverter.toFarmData=toFarmData,webmappingConverter}),angular.module("farmbuild.webmapping").factory("openLayers",function(validations,$log,openlayersDraw,googlemapslayer){function _init(targetElementId,layerSelectionElementId,farmGeometry,paddocksGeometry){var isNew;_isDefined(farmGeometry)||(paddocksGeometry={type:"FeatureCollection",features:[]},farmGeometry={type:"FeatureCollection",features:[]},isNew=!0),_targetElementId=targetElementId,_layerSelectionElementId=layerSelectionElementId,_isNew=isNew,_isDefined(_map)&&_map.setTarget&&(_map.setTarget(null),_map=null);var _layerSelectionElement=document.getElementById(layerSelectionElementId);proj4.defs("EPSG:4283","+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs");var projection=ol.proj.get({code:"EPSG:4283"});return _view=new ol.View({rotation:0,projection:projection,maxZoom:21}),_paddocksSource=new ol.source.Vector({features:(new ol.format.GeoJSON).readFeatures(paddocksGeometry,{dataProjection:"EPSG:4283",featureProjection:"EPSG:3857"})}),_farmSource=new ol.source.Vector({features:(new ol.format.GeoJSON).readFeatures(farmGeometry,{dataProjection:"EPSG:4283",featureProjection:"EPSG:3857"})}),_paddocksLayer=new ol.layer.Vector({source:_paddocksSource,style:new ol.style.Style({fill:new ol.style.Fill({color:"rgba(255, 255, 255, 0.3)"}),stroke:new ol.style.Stroke({color:"#319FD3",width:1})})}),_farmLayer=new ol.layer.Vector({source:_farmSource,style:new ol.style.Style({fill:new ol.style.Fill({color:"rgba(255, 255, 255, 0)"}),stroke:new ol.style.Stroke({color:"#ff6600",width:3})})}),_map=new ol.Map({layers:[_paddocksLayer,_farmLayer],target:targetElementId,view:_view,interactions:ol.interaction.defaults({altShiftDragRotate:!1,dragPan:!1,rotate:!1,mouseWheelZoom:!0}).extend([new ol.interaction.DragPan({kinetic:null})]),controls:ol.control.defaults({attributionOptions:{collapsible:!1}}).extend([new ol.control.ZoomToExtent({extent:_farmSource.getExtent()}),new ol.control.ScaleLine])}),_size=_map.getSize(),_layerSelectionElement.addEventListener("change",function(){var layer;"paddocks"===_layerSelectionElement.value&&(layer=_paddocksLayer),"farm"===_layerSelectionElement.value&&(layer=_farmLayer),openlayersDraw.init(layer,_map)}),{map:_map,view:_view}}function _transform(latLng,sourceProjection,destinationProjection){var transformed=ol.proj.transform(latLng,sourceProjection,destinationProjection);return new google.maps.LatLng(transformed[1],transformed[0])}function _load(farmGeometry,paddocksGeometry){return _init(_targetElementId,_layerSelectionElementId,farmGeometry,paddocksGeometry)}function _exportGeometry(){var data,format=new ol.format.GeoJSON;try{data=format.writeFeatures(_paddocksLayer.getSource().getFeatures())}catch(e){}return JSON.stringify(data,null,4)}function _clear(){_paddocksSource.clear(),_farmSource.clear()}function _integrateGMap(gmap){_view.on("change:center",function(){var center=ol.proj.transform(_view.getCenter(),googlemapslayer.getProjection(),_projection);gmap.setCenter(new google.maps.LatLng(center[1],center[0]))}),_view.on("change:resolution",function(){gmap.setZoom(_view.getZoom())}),window.onresize=function(){var center=_transform(_view.getCenter(),googlemapslayer.getProjection(),_projection);google.maps.event.trigger(gmap,"resize"),gmap.setCenter(center)},_isNew?(gmap.controls[google.maps.ControlPosition.TOP_LEFT].push(_targetEl),_targetEl.parentNode.removeChild(_targetEl),_view.setCenter(ol.proj.transform([defaults.centerNew[1],defaults.centerNew[0]],_projection,googlemapslayer.getProjection())),_view.setZoom(defaults.zoomNew)):_view.fitExtent(_farmSource.getExtent(),_size)}function _getProjection(){return _projection}function _center(coordinates){_view.setCenter(coordinates),_view.setZoom(15)}function _paddocksLayer(paddocksGeometry){var _paddocksSource=new ol.source.Vector({features:(new ol.format.GeoJSON).readFeatures(paddocksGeometry,{dataProjection:"EPSG:4283",featureProjection:"EPSG:3857"})});return new ol.layer.Vector({source:_paddocksSource,style:new ol.style.Style({fill:new ol.style.Fill({color:"rgba(255, 255, 255, 0.3)"}),stroke:new ol.style.Stroke({color:"#319FD3",width:1})})})}function _farmLayer(farmGeometry){var paddocksSource=new ol.source.Vector({features:(new ol.format.GeoJSON).readFeatures(farmGeometry,{dataProjection:"EPSG:4283",featureProjection:"EPSG:3857"})});return new ol.layer.Vector({source:paddocksSource,style:new ol.style.Style({fill:new ol.style.Fill({color:"rgba(255, 255, 255, 0.3)"}),stroke:new ol.style.Stroke({color:"#319FD3",width:1})})})}var _map,_paddocksLayer,_farmLayer,_size,_view,_paddocksSource,_farmSource,_targetElementId,_layerSelectionElementId,_isNew,defaults={centerNew:[-36.22488327137526,145.5826132801325],zoomNew:6},_targetEl=document.getElementById("olmap"),_projection="EPSG:4326",_isDefined=validations.isDefined;return{init:_init,load:_load,exportGeometry:_exportGeometry,clear:_clear,center:_center,integrateGMap:_integrateGMap,getProjection:_getProjection,paddocksLayer:_paddocksLayer,farmLayer:_farmLayer}}),angular.module("farmbuild.webmapping").factory("webMappingSession",function($log,farmdata,validations){function load(){var root=farmdata.session.find();return _isDefined(root)?root.webMapping:void 0}function save(toSave){var farmData=farmdata.session.find();return _isDefined(farmData)?(farmData.dateLastUpdated=new Date,farmData.webMapping=toSave,farmdata.session.save(farmData),toSave):void $log.error("Unable to find the farmData in the session!")}var webMappingSession={},_isDefined=validations.isDefined;return webMappingSession.save=save,webMappingSession.loadSection=function(section){var loaded=load();return loaded?loaded[section]:null},webMappingSession.isLoadFlagSet=function(location){var load=!1;return location.href.split("?").length>1&&0===location.href.split("?")[1].indexOf("load")&&(load="true"===location.href.split("?")[1].split("=")[1]),load},webMappingSession.find=function(){return farmdata.session.find()},webMappingSession}),angular.module("farmbuild.webmapping").factory("webmappingValidator",function(validations,$log){function isGeoJson(geoJson){return 0===geojsonhint.hint(geoJson).length}function _validate(farmData){return $log.info("validating farmData...",farmData),_isDefined(farmData)&&_isDefined(farmData.geometry)&&_isDefined(farmData.paddocks)?!0:($log.error("invalid, must have geometry and paddocks: %j",farmData),!1)}{var webmappingValidator={},_isDefined=validations.isDefined;validations.isArray,validations.isPositiveNumber,validations.isEmpty}if(!_isDefined(geojsonhint))throw Error("geojsonhint must be available!");return webmappingValidator.isGeoJson=isGeoJson,webmappingValidator.validate=_validate,webmappingValidator}),angular.module("farmbuild.webmapping").factory("googleaddresssearch",function(validations,$log,openLayers,googlemapslayer){function _init(targetElementId){var autocomplete=new google.maps.places.Autocomplete(document.getElementById(targetElementId),{componentRestrictions:countryRestrict});google.maps.event.addListener(autocomplete,"place_changed",function(){_onPlaceChanged(autocomplete)})}function _onPlaceChanged(autocomplete){var latLng,place=autocomplete.getPlace();place.geometry&&(latLng=place.geometry.location,_center(latLng))}function _transform(latLng,sourceProjection,destinationProjection){return ol.proj.transform([latLng.lng(),latLng.lat()],sourceProjection,destinationProjection)}function _center(latLng){var googleMapProjection=googlemapslayer.getProjection(),openLayerProjection=openLayers.getProjection(),centerPoint=_transform(latLng,openLayerProjection,googleMapProjection);openLayers.center(centerPoint)}var countryRestrict={country:"au"};return{init:_init}}),angular.module("farmbuild.webmapping").factory("googlemapslayer",function(validations,$log){function _init(targetElementId){return new google.maps.Map(document.getElementById(targetElementId),{disableDefaultUI:!0,keyboardShortcuts:!1,draggable:!1,disableDoubleClickZoom:!0,scrollwheel:!1,streetViewControl:!1,mapTypeId:google.maps.MapTypeId.SATELLITE})}function _getProjection(){return _projection}var _projection="EPSG:3857";return{init:_init,getProjection:_getProjection}});var MERGE,REMOVE,CLIP,AREA;angular.module("farmbuild.webmapping").factory("openlayersDraw",function(validations,$log){function _merge(){var data,merged,format=new ol.format.GeoJSON,featuresToMerge=_select.getFeatures().getArray();_removeFeatures(featuresToMerge,_layer),data=angular.fromJson(format.writeFeatures(featuresToMerge)),merged=turf.merge(data),_source.addFeature(new ol.Feature({geometry:new ol.geom.Polygon(merged.geometry.coordinates)})),_select.getFeatures().clear()}function _clip(clippee,clipper){return turf.erase(clippee,clipper)}function _clipAdd(){var clipped,format=new ol.format.GeoJSON,featureToClip=angular.fromJson(format.writeFeatures(_select.getFeatures().getArray())).features[0],layerFeatures=_source.getFeatures();angular.forEach(layerFeatures,function(layerFeature){var _clipped,clipper=angular.fromJson(format.writeFeature(layerFeature));_clipped=_clip(featureToClip,clipper),_isDefined(_clipped)&&(clipped=_clipped)}),_source.addFeature(new ol.Feature({geometry:new ol.geom.Polygon(clipped.geometry.coordinates)})),_source.removeFeature(_select.getFeatures().item(0)),_select.getFeatures().clear()}function _area(){var features,format=new ol.format.GeoJSON,olFeatures=_select.getFeatures().getArray();return features=angular.fromJson(format.writeFeatures(olFeatures)),1e-4*turf.area(features)}function _removeFeatures(features,layer){_isDefined(features)&&angular.forEach(features,function(feature){layer.getSource().removeFeature(feature)})}function _remove(){var featuresToRemove=_select.getFeatures().getArray();_removeFeatures(featuresToRemove,_layer),_select.getFeatures().clear()}var _draw,_modify,_select,_snap,_layer,_source,_isDefined=validations.isDefined,_init=function(layer,map){function _removeInteractions(){map.getInteractions().clear(),map.addInteraction(new ol.interaction.DragPan({kinetic:null}))}var selectedLayer=document.getElementById("layers");if(_isDefined(layer)){_layer=layer,_source=layer.getSource(),map.on("click",function(evt){var activeLayer=selectedLayer.value;return"farm"!==activeLayer&&"paddocks"!==activeLayer?(modify.disable(),void draw.disable()):void(_source.getFeaturesAtCoordinate(evt.coordinate).length>0?(draw.disable(),modify.enable()):(modify.disable(),draw.enable()))}),_removeInteractions(map),_isDefined(_source)||(_source=new ol.source.Vector({features:[]}));var modify=function(){function _init(){map.addInteraction(_select),map.addInteraction(_modify),setEvents()}function _enable(){_select.setActive(!0),_modify.setActive(!0)}function _disable(){_select.setActive(!1),_modify.setActive(!1)}function setEvents(){var selectedFeatures=_select.getFeatures();_select.on("change:active",function(){selectedFeatures.forEach(selectedFeatures.remove,selectedFeatures)})}return _select=new ol.interaction.Select({addCondition:ol.events.condition.shiftKeyOnly,layers:[layer]}),_modify=new ol.interaction.Modify({features:_select.getFeatures()}),{init:_init,enable:_enable,disable:_disable}}(),draw=function(){function _init(){map.addInteraction(_draw),_draw.setActive(!1)}function _enable(){_draw.setActive(!0)}function _disable(){_draw.setActive(!1)}return _draw=new ol.interaction.Draw({source:_source,type:"Polygon"}),{init:_init,enable:_enable,disable:_disable}}();_snap=new ol.interaction.Snap({source:_source}),modify.init(),draw.init(),map.addInteraction(_snap),draw.disable(),modify.disable()}};return MERGE=_merge,REMOVE=_remove,CLIP=_clipAdd,AREA=_area,{init:_init,merge:_merge,remove:_remove,clip:_clipAdd,area:_area}}),angular.module("farmbuild.webmapping").run(function(webmapping){}),angular.injector(["ng","farmbuild.webmapping"]);
//# sourceMappingURL=farmbuild-webmapping.min.js.map